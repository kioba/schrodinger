{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Schrodinger Nullable Type extension library inspiried by the Arrow Option.","title":"Schrodinger"},{"location":"#schrodinger","text":"Nullable Type extension library inspiried by the Arrow Option.","title":"Schrodinger"},{"location":"empty/","text":"empty fun <A> empty(): A? Constructs a left side value. Example usage: val myVal = empty<Int>() 1.fold(::empty, { it }) Return left side value.","title":"empty"},{"location":"empty/#empty","text":"fun <A> empty(): A? Constructs a left side value. Example usage: val myVal = empty<Int>() 1.fold(::empty, { it }) Return left side value.","title":"empty"},{"location":"exists/","text":"exists inline fun <A> A?.exists(f: (A) -> Boolean ): Boolean Returns the result of $f applied on the $receiver. Example usage: 1.exists{ it > 5 } // false 1.exists{ it < 5 } // true Parameters f - function to apply in the right side value. Receiver the vlaue which $f will be appliead on. Return the result of applying $f on the right side value otherwise false.","title":"exists"},{"location":"exists/#exists","text":"inline fun <A> A?.exists(f: (A) -> Boolean ): Boolean Returns the result of $f applied on the $receiver. Example usage: 1.exists{ it > 5 } // false 1.exists{ it < 5 } // true","title":"exists"},{"location":"exists/#parameters","text":"f - function to apply in the right side value. Receiver the vlaue which $f will be appliead on. Return the result of applying $f on the right side value otherwise false.","title":"Parameters"},{"location":"filter-not/","text":"filterNot inline fun <A> A?.filterNot(f: (A) -> Boolean ): A? Returns the $receiver value if the result of $f applied on it is false otherwise null. Example usage: 1.filterNot{ it > 5 } // 1 1.filterNot{ it < 5 } // null Parameters f - function to apply in the right side value. Receiver the vlaue which $f will be appliead on. Return the receiver if the result of applying $f on the right side value is false otherwise null.","title":"filterNot"},{"location":"filter-not/#filternot","text":"inline fun <A> A?.filterNot(f: (A) -> Boolean ): A? Returns the $receiver value if the result of $f applied on it is false otherwise null. Example usage: 1.filterNot{ it > 5 } // 1 1.filterNot{ it < 5 } // null","title":"filterNot"},{"location":"filter-not/#parameters","text":"f - function to apply in the right side value. Receiver the vlaue which $f will be appliead on. Return the receiver if the result of applying $f on the right side value is false otherwise null.","title":"Parameters"},{"location":"filter/","text":"filter inline fun <A> A?.filter(f: (A) -> Boolean ): A? Returns the $receiver value if the result of $f applied on it is true otherwise null. Example usage: 1.filter{ it > 5 } // null 1.filter{ it < 5 } // 1 Parameters f - function to apply in the right side value. Receiver the vlaue which $f will be appliead on. Return the receiver if the result of applying $f on the right side value is true otherwise null.","title":"filter"},{"location":"filter/#filter","text":"inline fun <A> A?.filter(f: (A) -> Boolean ): A? Returns the $receiver value if the result of $f applied on it is true otherwise null. Example usage: 1.filter{ it > 5 } // null 1.filter{ it < 5 } // 1","title":"filter"},{"location":"filter/#parameters","text":"f - function to apply in the right side value. Receiver the vlaue which $f will be appliead on. Return the receiver if the result of applying $f on the right side value is true otherwise null.","title":"Parameters"},{"location":"flat-map/","text":"flatMap inline fun <A, B> A?.flatMap(f: (A) -> B?): B? Returns the result of $f if the $receiver is a right side value. Example usage: 1.flatMap{ getAge() } null.flatMap{ getAge() } Parameters f - function to apply in the right side value. Receiver the vlaue which $f will be appliead if it is a right side value. Return the result of applying $f on the value if it is a right side value otherwise null.","title":"flatMap"},{"location":"flat-map/#flatmap","text":"inline fun <A, B> A?.flatMap(f: (A) -> B?): B? Returns the result of $f if the $receiver is a right side value. Example usage: 1.flatMap{ getAge() } null.flatMap{ getAge() }","title":"flatMap"},{"location":"flat-map/#parameters","text":"f - function to apply in the right side value. Receiver the vlaue which $f will be appliead if it is a right side value. Return the result of applying $f on the value if it is a right side value otherwise null.","title":"Parameters"},{"location":"fold/","text":"fold inline fun <A, B> A?.fold(ifNull: () -> B, ifSome: (A) -> B): B Fold higher order function reduces the left or right side into a return value Example usage: null.fold({ 1 }, ::id) 1.fold( ifNull = { 1 }, ifSome = ::id ) Parameters ifNull - the lambda will be applied in case of a left side value. ifSome - the lambda will be applied with the right side value. Receiver the value it will be folded over Return result of $ifNull if the $receiver is null otherwise the result of $ifSome","title":"fold"},{"location":"fold/#fold","text":"inline fun <A, B> A?.fold(ifNull: () -> B, ifSome: (A) -> B): B Fold higher order function reduces the left or right side into a return value Example usage: null.fold({ 1 }, ::id) 1.fold( ifNull = { 1 }, ifSome = ::id )","title":"fold"},{"location":"fold/#parameters","text":"ifNull - the lambda will be applied in case of a left side value. ifSome - the lambda will be applied with the right side value. Receiver the value it will be folded over Return result of $ifNull if the $receiver is null otherwise the result of $ifSome","title":"Parameters"},{"location":"id/","text":"id fun <A> id(a: A): A Identity function. Example usage: 1.fold({ 1 }, ::id) Parameters a - the value which will be returned. Return the given argument.","title":"id"},{"location":"id/#id","text":"fun <A> id(a: A): A Identity function. Example usage: 1.fold({ 1 }, ::id)","title":"id"},{"location":"id/#parameters","text":"a - the value which will be returned. Return the given argument.","title":"Parameters"},{"location":"is-empty/","text":"isEmpty fun <A> A?.isEmpty(): Boolean Checks if the values is left value or not. Example usage: val myVal: Int = null if(myVal.isEmpty()) { // code } Receiver will be used as the value for identification. Return True if the value is null","title":"isEmpty"},{"location":"is-empty/#isempty","text":"fun <A> A?.isEmpty(): Boolean Checks if the values is left value or not. Example usage: val myVal: Int = null if(myVal.isEmpty()) { // code } Receiver will be used as the value for identification. Return True if the value is null","title":"isEmpty"},{"location":"is-some/","text":"isSome fun <A> A?.isSome(): Boolean Checks if the values is right value or not. Example usage: val myVal: Int = 1 if(myVal.isSome()) { // code } Receiver the value for identification. Return True if the value is some","title":"isSome"},{"location":"is-some/#issome","text":"fun <A> A?.isSome(): Boolean Checks if the values is right value or not. Example usage: val myVal: Int = 1 if(myVal.isSome()) { // code } Receiver the value for identification. Return True if the value is some","title":"isSome"},{"location":"map/","text":"map inline fun <A, B> A?.map(f: (A) -> B): B? Map higher order function takes the right side value and applies on f. Example usage: 1.map{ it.toString() } // \"1\" null.map{ \"Hello World\" } // null Parameters f - function to apply on the right side value. Receiver the value which $f will be applied if it is a right side value. Return the result of applying $f on the value if it is a right side value otherwise null.","title":"map"},{"location":"map/#map","text":"inline fun <A, B> A?.map(f: (A) -> B): B? Map higher order function takes the right side value and applies on f. Example usage: 1.map{ it.toString() } // \"1\" null.map{ \"Hello World\" } // null","title":"map"},{"location":"map/#parameters","text":"f - function to apply on the right side value. Receiver the value which $f will be applied if it is a right side value. Return the result of applying $f on the value if it is a right side value otherwise null.","title":"Parameters"},{"location":"maybe/","text":"maybe fun <A> Boolean .maybe(f: () -> A): A? returns the result of $f in case of the receiver is true otherwsie null. Example usage: true.maybe{ 1 } // 1 false.maybe{ 1 } // null Parameters f - function to apply if the receiver is true. Receiver value which $f will be applied on. Return the result of f if the receiver is true otherwise null.","title":"maybe"},{"location":"maybe/#maybe","text":"fun <A> Boolean .maybe(f: () -> A): A? returns the result of $f in case of the receiver is true otherwsie null. Example usage: true.maybe{ 1 } // 1 false.maybe{ 1 } // null","title":"maybe"},{"location":"maybe/#parameters","text":"f - function to apply if the receiver is true. Receiver value which $f will be applied on. Return the result of f if the receiver is true otherwise null.","title":"Parameters"},{"location":"or/","text":"or inline fun <A> A?.or(f: () -> A): A Returns the $receiver if it exists otherwise result of $f. Example usage: null.or{ 5 } // 5 1.or{ 5 } // 1 Parameters f - function which will be returned if the $receiver is a left side vaule. Receiver the vlaue which will be returned if it is a right side value. Return the result of applying $f or the $receiver.","title":"or"},{"location":"or/#or","text":"inline fun <A> A?.or(f: () -> A): A Returns the $receiver if it exists otherwise result of $f. Example usage: null.or{ 5 } // 5 1.or{ 5 } // 1","title":"or"},{"location":"or/#parameters","text":"f - function which will be returned if the $receiver is a left side vaule. Receiver the vlaue which will be returned if it is a right side value. Return the result of applying $f or the $receiver.","title":"Parameters"}]}